Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> log
Rule 1     log -> game
Rule 2     game -> descriptor play game
Rule 3     game -> empty
Rule 4     descriptor -> HEADER descriptor
Rule 5     descriptor -> empty
Rule 6     play -> turn play
Rule 7     play -> empty result
Rule 8     play -> ending_turn result
Rule 9     turn -> TURN move_p1 com_p1 move_p2 com_p2
Rule 10    ending_turn -> TURN move_p1 com_p1_final
Rule 11    com_p1_final -> commentary
Rule 12    com_p1_final -> empty
Rule 13    com_p1 -> commentary TURN_RECOVERY
Rule 14    com_p1 -> empty
Rule 15    com_p2 -> commentary
Rule 16    com_p2 -> empty
Rule 17    commentary -> COMMENTARY
Rule 18    move_p1 -> MOVE
Rule 19    move_p1 -> LONG_CASTLE
Rule 20    move_p1 -> SHORT_CASTLE
Rule 21    move_p2 -> MOVE
Rule 22    move_p2 -> LONG_CASTLE
Rule 23    move_p2 -> SHORT_CASTLE
Rule 24    result -> VICTORY
Rule 25    empty -> <empty>

Terminals, with rules where they appear

COMMENTARY           : 17
HEADER               : 4
LONG_CASTLE          : 19 22
MOVE                 : 18 21
SHORT_CASTLE         : 20 23
TURN                 : 9 10
TURN_RECOVERY        : 13
VICTORY              : 24
error                : 

Nonterminals, with rules where they appear

com_p1               : 9
com_p1_final         : 10
com_p2               : 9
commentary           : 11 13 15
descriptor           : 2 4
empty                : 3 5 7 12 14 16
ending_turn          : 8
game                 : 1 2
log                  : 0
move_p1              : 9 10
move_p2              : 9
play                 : 2 6
result               : 7 8
turn                 : 6

Parsing method: LALR

state 0

    (0) S' -> . log
    (1) log -> . game
    (2) game -> . descriptor play game
    (3) game -> . empty
    (4) descriptor -> . HEADER descriptor
    (5) descriptor -> . empty
    (25) empty -> .

    HEADER          shift and go to state 5
    $end            reduce using rule 25 (empty -> .)
    TURN            reduce using rule 25 (empty -> .)
    VICTORY         reduce using rule 25 (empty -> .)

    log                            shift and go to state 1
    game                           shift and go to state 2
    descriptor                     shift and go to state 3
    empty                          shift and go to state 4

state 1

    (0) S' -> log .



state 2

    (1) log -> game .

    $end            reduce using rule 1 (log -> game .)


state 3

    (2) game -> descriptor . play game
    (6) play -> . turn play
    (7) play -> . empty result
    (8) play -> . ending_turn result
    (9) turn -> . TURN move_p1 com_p1 move_p2 com_p2
    (25) empty -> .
    (10) ending_turn -> . TURN move_p1 com_p1_final

    TURN            shift and go to state 10
    VICTORY         reduce using rule 25 (empty -> .)

    play                           shift and go to state 6
    turn                           shift and go to state 7
    empty                          shift and go to state 8
    ending_turn                    shift and go to state 9

state 4

    (3) game -> empty .
    (5) descriptor -> empty .

    $end            reduce using rule 3 (game -> empty .)
    TURN            reduce using rule 5 (descriptor -> empty .)
    VICTORY         reduce using rule 5 (descriptor -> empty .)


state 5

    (4) descriptor -> HEADER . descriptor
    (4) descriptor -> . HEADER descriptor
    (5) descriptor -> . empty
    (25) empty -> .

    HEADER          shift and go to state 5
    TURN            reduce using rule 25 (empty -> .)
    VICTORY         reduce using rule 25 (empty -> .)

    descriptor                     shift and go to state 11
    empty                          shift and go to state 12

state 6

    (2) game -> descriptor play . game
    (2) game -> . descriptor play game
    (3) game -> . empty
    (4) descriptor -> . HEADER descriptor
    (5) descriptor -> . empty
    (25) empty -> .

    HEADER          shift and go to state 5
    $end            reduce using rule 25 (empty -> .)
    TURN            reduce using rule 25 (empty -> .)
    VICTORY         reduce using rule 25 (empty -> .)

    descriptor                     shift and go to state 3
    game                           shift and go to state 13
    empty                          shift and go to state 4

state 7

    (6) play -> turn . play
    (6) play -> . turn play
    (7) play -> . empty result
    (8) play -> . ending_turn result
    (9) turn -> . TURN move_p1 com_p1 move_p2 com_p2
    (25) empty -> .
    (10) ending_turn -> . TURN move_p1 com_p1_final

    TURN            shift and go to state 10
    VICTORY         reduce using rule 25 (empty -> .)

    turn                           shift and go to state 7
    play                           shift and go to state 14
    empty                          shift and go to state 8
    ending_turn                    shift and go to state 9

state 8

    (7) play -> empty . result
    (24) result -> . VICTORY

    VICTORY         shift and go to state 16

    result                         shift and go to state 15

state 9

    (8) play -> ending_turn . result
    (24) result -> . VICTORY

    VICTORY         shift and go to state 16

    result                         shift and go to state 17

state 10

    (9) turn -> TURN . move_p1 com_p1 move_p2 com_p2
    (10) ending_turn -> TURN . move_p1 com_p1_final
    (18) move_p1 -> . MOVE
    (19) move_p1 -> . LONG_CASTLE
    (20) move_p1 -> . SHORT_CASTLE

    MOVE            shift and go to state 19
    LONG_CASTLE     shift and go to state 20
    SHORT_CASTLE    shift and go to state 21

    move_p1                        shift and go to state 18

state 11

    (4) descriptor -> HEADER descriptor .

    TURN            reduce using rule 4 (descriptor -> HEADER descriptor .)
    VICTORY         reduce using rule 4 (descriptor -> HEADER descriptor .)


state 12

    (5) descriptor -> empty .

    TURN            reduce using rule 5 (descriptor -> empty .)
    VICTORY         reduce using rule 5 (descriptor -> empty .)


state 13

    (2) game -> descriptor play game .

    $end            reduce using rule 2 (game -> descriptor play game .)


state 14

    (6) play -> turn play .

    HEADER          reduce using rule 6 (play -> turn play .)
    TURN            reduce using rule 6 (play -> turn play .)
    VICTORY         reduce using rule 6 (play -> turn play .)
    $end            reduce using rule 6 (play -> turn play .)


state 15

    (7) play -> empty result .

    HEADER          reduce using rule 7 (play -> empty result .)
    TURN            reduce using rule 7 (play -> empty result .)
    VICTORY         reduce using rule 7 (play -> empty result .)
    $end            reduce using rule 7 (play -> empty result .)


state 16

    (24) result -> VICTORY .

    HEADER          reduce using rule 24 (result -> VICTORY .)
    TURN            reduce using rule 24 (result -> VICTORY .)
    VICTORY         reduce using rule 24 (result -> VICTORY .)
    $end            reduce using rule 24 (result -> VICTORY .)


state 17

    (8) play -> ending_turn result .

    HEADER          reduce using rule 8 (play -> ending_turn result .)
    TURN            reduce using rule 8 (play -> ending_turn result .)
    VICTORY         reduce using rule 8 (play -> ending_turn result .)
    $end            reduce using rule 8 (play -> ending_turn result .)


state 18

    (9) turn -> TURN move_p1 . com_p1 move_p2 com_p2
    (10) ending_turn -> TURN move_p1 . com_p1_final
    (13) com_p1 -> . commentary TURN_RECOVERY
    (14) com_p1 -> . empty
    (11) com_p1_final -> . commentary
    (12) com_p1_final -> . empty
    (17) commentary -> . COMMENTARY
    (25) empty -> .

    COMMENTARY      shift and go to state 26
    MOVE            reduce using rule 25 (empty -> .)
    LONG_CASTLE     reduce using rule 25 (empty -> .)
    SHORT_CASTLE    reduce using rule 25 (empty -> .)
    VICTORY         reduce using rule 25 (empty -> .)

    com_p1                         shift and go to state 22
    com_p1_final                   shift and go to state 23
    commentary                     shift and go to state 24
    empty                          shift and go to state 25

state 19

    (18) move_p1 -> MOVE .

    COMMENTARY      reduce using rule 18 (move_p1 -> MOVE .)
    MOVE            reduce using rule 18 (move_p1 -> MOVE .)
    LONG_CASTLE     reduce using rule 18 (move_p1 -> MOVE .)
    SHORT_CASTLE    reduce using rule 18 (move_p1 -> MOVE .)
    VICTORY         reduce using rule 18 (move_p1 -> MOVE .)


state 20

    (19) move_p1 -> LONG_CASTLE .

    COMMENTARY      reduce using rule 19 (move_p1 -> LONG_CASTLE .)
    MOVE            reduce using rule 19 (move_p1 -> LONG_CASTLE .)
    LONG_CASTLE     reduce using rule 19 (move_p1 -> LONG_CASTLE .)
    SHORT_CASTLE    reduce using rule 19 (move_p1 -> LONG_CASTLE .)
    VICTORY         reduce using rule 19 (move_p1 -> LONG_CASTLE .)


state 21

    (20) move_p1 -> SHORT_CASTLE .

    COMMENTARY      reduce using rule 20 (move_p1 -> SHORT_CASTLE .)
    MOVE            reduce using rule 20 (move_p1 -> SHORT_CASTLE .)
    LONG_CASTLE     reduce using rule 20 (move_p1 -> SHORT_CASTLE .)
    SHORT_CASTLE    reduce using rule 20 (move_p1 -> SHORT_CASTLE .)
    VICTORY         reduce using rule 20 (move_p1 -> SHORT_CASTLE .)


state 22

    (9) turn -> TURN move_p1 com_p1 . move_p2 com_p2
    (21) move_p2 -> . MOVE
    (22) move_p2 -> . LONG_CASTLE
    (23) move_p2 -> . SHORT_CASTLE

    MOVE            shift and go to state 28
    LONG_CASTLE     shift and go to state 29
    SHORT_CASTLE    shift and go to state 30

    move_p2                        shift and go to state 27

state 23

    (10) ending_turn -> TURN move_p1 com_p1_final .

    VICTORY         reduce using rule 10 (ending_turn -> TURN move_p1 com_p1_final .)


state 24

    (13) com_p1 -> commentary . TURN_RECOVERY
    (11) com_p1_final -> commentary .

    TURN_RECOVERY   shift and go to state 31
    VICTORY         reduce using rule 11 (com_p1_final -> commentary .)


state 25

    (14) com_p1 -> empty .
    (12) com_p1_final -> empty .

    MOVE            reduce using rule 14 (com_p1 -> empty .)
    LONG_CASTLE     reduce using rule 14 (com_p1 -> empty .)
    SHORT_CASTLE    reduce using rule 14 (com_p1 -> empty .)
    VICTORY         reduce using rule 12 (com_p1_final -> empty .)


state 26

    (17) commentary -> COMMENTARY .

    TURN_RECOVERY   reduce using rule 17 (commentary -> COMMENTARY .)
    VICTORY         reduce using rule 17 (commentary -> COMMENTARY .)
    TURN            reduce using rule 17 (commentary -> COMMENTARY .)


state 27

    (9) turn -> TURN move_p1 com_p1 move_p2 . com_p2
    (15) com_p2 -> . commentary
    (16) com_p2 -> . empty
    (17) commentary -> . COMMENTARY
    (25) empty -> .

    COMMENTARY      shift and go to state 26
    TURN            reduce using rule 25 (empty -> .)
    VICTORY         reduce using rule 25 (empty -> .)

    com_p2                         shift and go to state 32
    commentary                     shift and go to state 33
    empty                          shift and go to state 34

state 28

    (21) move_p2 -> MOVE .

    COMMENTARY      reduce using rule 21 (move_p2 -> MOVE .)
    TURN            reduce using rule 21 (move_p2 -> MOVE .)
    VICTORY         reduce using rule 21 (move_p2 -> MOVE .)


state 29

    (22) move_p2 -> LONG_CASTLE .

    COMMENTARY      reduce using rule 22 (move_p2 -> LONG_CASTLE .)
    TURN            reduce using rule 22 (move_p2 -> LONG_CASTLE .)
    VICTORY         reduce using rule 22 (move_p2 -> LONG_CASTLE .)


state 30

    (23) move_p2 -> SHORT_CASTLE .

    COMMENTARY      reduce using rule 23 (move_p2 -> SHORT_CASTLE .)
    TURN            reduce using rule 23 (move_p2 -> SHORT_CASTLE .)
    VICTORY         reduce using rule 23 (move_p2 -> SHORT_CASTLE .)


state 31

    (13) com_p1 -> commentary TURN_RECOVERY .

    MOVE            reduce using rule 13 (com_p1 -> commentary TURN_RECOVERY .)
    LONG_CASTLE     reduce using rule 13 (com_p1 -> commentary TURN_RECOVERY .)
    SHORT_CASTLE    reduce using rule 13 (com_p1 -> commentary TURN_RECOVERY .)


state 32

    (9) turn -> TURN move_p1 com_p1 move_p2 com_p2 .

    TURN            reduce using rule 9 (turn -> TURN move_p1 com_p1 move_p2 com_p2 .)
    VICTORY         reduce using rule 9 (turn -> TURN move_p1 com_p1 move_p2 com_p2 .)


state 33

    (15) com_p2 -> commentary .

    TURN            reduce using rule 15 (com_p2 -> commentary .)
    VICTORY         reduce using rule 15 (com_p2 -> commentary .)


state 34

    (16) com_p2 -> empty .

    TURN            reduce using rule 16 (com_p2 -> empty .)
    VICTORY         reduce using rule 16 (com_p2 -> empty .)

